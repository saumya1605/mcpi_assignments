
Day11_Assignment02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000500  08000508  00001508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000500  08000500  00001508  2**0
                  CONTENTS
  4 .ARM          00000000  08000500  08000500  00001508  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000500  08000508  00001508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000500  08000500  00001500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000504  08000504  00001504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001508  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f23  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042a  00000000  00000000  0000245b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00002888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000097  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180e1  00000000  00000000  00002a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013ef  00000000  00000000  0001aae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b856  00000000  00000000  0001bed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a772d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000208  00000000  00000000  000a7770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000009a  00000000  00000000  000a7997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004e8 	.word	0x080004e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004e8 	.word	0x080004e8

080001c8 <LedInit>:
Date: Sep 19, 2024
*/

#include "led.h"

void LedInit(uint32_t pin) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// enable GPIOD clock -- RCC AHB1ENR[GPIO_CLKEN] = 1
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 80001d0:	4b29      	ldr	r3, [pc, #164]	@ (8000278 <LedInit+0xb0>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a28      	ldr	r2, [pc, #160]	@ (8000278 <LedInit+0xb0>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// config GPIOD.pin as output -- MODER[2*pin+1:2*pin] - 01
	GPIO_LED->MODER &= ~BV(pin*2+1);
 80001dc:	4b27      	ldr	r3, [pc, #156]	@ (800027c <LedInit+0xb4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0052      	lsls	r2, r2, #1
 80001e4:	3201      	adds	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4a22      	ldr	r2, [pc, #136]	@ (800027c <LedInit+0xb4>)
 80001f2:	400b      	ands	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin*2);
 80001f6:	4b21      	ldr	r3, [pc, #132]	@ (800027c <LedInit+0xb4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	0052      	lsls	r2, r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a1d      	ldr	r2, [pc, #116]	@ (800027c <LedInit+0xb4>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
	// config GPIOD.pin as pushpull -- OTYPER[pin] - 0
	GPIO_LED->OTYPER &= ~BV(pin);
 800020c:	4b1b      	ldr	r3, [pc, #108]	@ (800027c <LedInit+0xb4>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	2101      	movs	r1, #1
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	43d2      	mvns	r2, r2
 800021a:	4611      	mov	r1, r2
 800021c:	4a17      	ldr	r2, [pc, #92]	@ (800027c <LedInit+0xb4>)
 800021e:	400b      	ands	r3, r1
 8000220:	6053      	str	r3, [r2, #4]
	// config GPIOD.pin as low-speed -- OSPEEDR[2*pin+1:2*pin] - 00
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin*2));
 8000222:	4b16      	ldr	r3, [pc, #88]	@ (800027c <LedInit+0xb4>)
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	0052      	lsls	r2, r2, #1
 800022a:	3201      	adds	r2, #1
 800022c:	2101      	movs	r1, #1
 800022e:	4091      	lsls	r1, r2
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	2001      	movs	r0, #1
 8000236:	fa00 f202 	lsl.w	r2, r0, r2
 800023a:	430a      	orrs	r2, r1
 800023c:	43d2      	mvns	r2, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a0e      	ldr	r2, [pc, #56]	@ (800027c <LedInit+0xb4>)
 8000242:	400b      	ands	r3, r1
 8000244:	6093      	str	r3, [r2, #8]
	// config GPIOD.pin with no pullup & pulldown resistor PUPDR[2*pin+1:2*pin] -- 00
	GPIO_LED->PUPDR &= ~(BV(pin*2+1) | BV(pin*2));
 8000246:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <LedInit+0xb4>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	0052      	lsls	r2, r2, #1
 800024e:	3201      	adds	r2, #1
 8000250:	2101      	movs	r1, #1
 8000252:	4091      	lsls	r1, r2
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	0052      	lsls	r2, r2, #1
 8000258:	2001      	movs	r0, #1
 800025a:	fa00 f202 	lsl.w	r2, r0, r2
 800025e:	430a      	orrs	r2, r1
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a05      	ldr	r2, [pc, #20]	@ (800027c <LedInit+0xb4>)
 8000266:	400b      	ands	r3, r1
 8000268:	60d3      	str	r3, [r2, #12]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020c00 	.word	0x40020c00

08000280 <LedOn>:

void LedOn(uint32_t pin) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 1
	GPIO_LED->ODR |= BV(pin);
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <LedOn+0x28>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	2101      	movs	r1, #1
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <LedOn+0x28>)
 8000298:	430b      	orrs	r3, r1
 800029a:	6153      	str	r3, [r2, #20]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40020c00 	.word	0x40020c00

080002ac <LedOff>:

void LedOff(uint32_t pin) {
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 0
	GPIO_LED->ODR &= ~BV(pin);
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <LedOff+0x2c>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	2101      	movs	r1, #1
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	43d2      	mvns	r2, r2
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <LedOff+0x2c>)
 80002c6:	400b      	ands	r3, r1
 80002c8:	6153      	str	r3, [r2, #20]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020c00 	.word	0x40020c00

080002dc <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	SystemInit();
 80002e0:	f000 f830 	bl	8000344 <SystemInit>
	Timer_Init();
 80002e4:	f000 f864 	bl	80003b0 <Timer_Init>
	LedInit(LED_RED_PIN);
 80002e8:	200e      	movs	r0, #14
 80002ea:	f7ff ff6d 	bl	80001c8 <LedInit>
	LedInit(LED_BLUE_PIN);
 80002ee:	200f      	movs	r0, #15
 80002f0:	f7ff ff6a 	bl	80001c8 <LedInit>
	LedInit(LED_GREEN_PIN);
 80002f4:	200c      	movs	r0, #12
 80002f6:	f7ff ff67 	bl	80001c8 <LedInit>
	LedInit(LED_ORANGE_PIN);
 80002fa:	200d      	movs	r0, #13
 80002fc:	f7ff ff64 	bl	80001c8 <LedInit>
	while(1) {
		LedOn(LED_RED_PIN);
 8000300:	200e      	movs	r0, #14
 8000302:	f7ff ffbd 	bl	8000280 <LedOn>
		LedOn(LED_BLUE_PIN);
 8000306:	200f      	movs	r0, #15
 8000308:	f7ff ffba 	bl	8000280 <LedOn>
		LedOn(LED_GREEN_PIN);
 800030c:	200c      	movs	r0, #12
 800030e:	f7ff ffb7 	bl	8000280 <LedOn>
		LedOn(LED_ORANGE_PIN);
 8000312:	200d      	movs	r0, #13
 8000314:	f7ff ffb4 	bl	8000280 <LedOn>
		Timer_Delay(3000);
 8000318:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800031c:	f000 f85e 	bl	80003dc <Timer_Delay>
		LedOff(LED_RED_PIN);
 8000320:	200e      	movs	r0, #14
 8000322:	f7ff ffc3 	bl	80002ac <LedOff>
		LedOff(LED_BLUE_PIN);
 8000326:	200f      	movs	r0, #15
 8000328:	f7ff ffc0 	bl	80002ac <LedOff>
		LedOff(LED_GREEN_PIN);
 800032c:	200c      	movs	r0, #12
 800032e:	f7ff ffbd 	bl	80002ac <LedOff>
		LedOff(LED_ORANGE_PIN);
 8000332:	200d      	movs	r0, #13
 8000334:	f7ff ffba 	bl	80002ac <LedOff>
		Timer_Delay(7000);
 8000338:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800033c:	f000 f84e 	bl	80003dc <Timer_Delay>
		LedOn(LED_RED_PIN);
 8000340:	bf00      	nop
 8000342:	e7dd      	b.n	8000300 <main+0x24>

08000344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  DWT_Init();
 8000348:	f000 f802 	bl	8000350 <DWT_Init>
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}

08000350 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000354:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <DWT_Init+0x58>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4a13      	ldr	r2, [pc, #76]	@ (80003a8 <DWT_Init+0x58>)
 800035a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800035e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000360:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <DWT_Init+0x58>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a10      	ldr	r2, [pc, #64]	@ (80003a8 <DWT_Init+0x58>)
 8000366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800036a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800036c:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <DWT_Init+0x5c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <DWT_Init+0x5c>)
 8000372:	f023 0301 	bic.w	r3, r3, #1
 8000376:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <DWT_Init+0x5c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a0b      	ldr	r2, [pc, #44]	@ (80003ac <DWT_Init+0x5c>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <DWT_Init+0x5c>)
 8000386:	2200      	movs	r2, #0
 8000388:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800038a:	bf00      	nop
    __ASM volatile ("NOP");
 800038c:	bf00      	nop
    __ASM volatile ("NOP");
 800038e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <DWT_Init+0x5c>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	2b00      	cmp	r3, #0
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
}
 800039e:	4618      	mov	r0, r3
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	e000edf0 	.word	0xe000edf0
 80003ac:	e0001000 	.word	0xe0001000

080003b0 <Timer_Init>:
#include "timer.h"

void Timer_Init(void) {
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	//* Enable Timer APB clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <Timer_Init+0x24>)
 80003b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b8:	4a06      	ldr	r2, [pc, #24]	@ (80003d4 <Timer_Init+0x24>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6413      	str	r3, [r2, #64]	@ 0x40
	//* Set Timer clock -- PCLK = TCLK = 16 MHz : * Set PR = 16000
	TIM7->PSC = (PR-1);
 80003c0:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <Timer_Init+0x28>)
 80003c2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40001400 	.word	0x40001400

080003dc <Timer_Delay>:

void Timer_Delay(uint32_t ms) {
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	//* Calculate number of clocks to count (CNT).
	uint32_t cnt = (TCLK / 1000) * ms / PR;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80003ea:	fb02 f303 	mul.w	r3, r2, r3
 80003ee:	4a15      	ldr	r2, [pc, #84]	@ (8000444 <Timer_Delay+0x68>)
 80003f0:	fba2 2303 	umull	r2, r3, r2, r3
 80003f4:	0a9b      	lsrs	r3, r3, #10
 80003f6:	60fb      	str	r3, [r7, #12]
	//* Set CNT in ARR.
	TIM7->ARR = cnt - 1;
 80003f8:	4a13      	ldr	r2, [pc, #76]	@ (8000448 <Timer_Delay+0x6c>)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
	//* Reset Timer Counter to 0.
	TIM7->CNT = 0;
 8000400:	4b11      	ldr	r3, [pc, #68]	@ (8000448 <Timer_Delay+0x6c>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	@ 0x24
	//* Start Timer in CR1.
	TIM7->CR1 |= TIM_CR1_CEN;
 8000406:	4b10      	ldr	r3, [pc, #64]	@ (8000448 <Timer_Delay+0x6c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a0f      	ldr	r2, [pc, #60]	@ (8000448 <Timer_Delay+0x6c>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6013      	str	r3, [r2, #0]
	//* Wait for UIF flag (in SR).
	while(!(TIM7->SR & TIM_SR_UIF));
 8000412:	bf00      	nop
 8000414:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <Timer_Delay+0x6c>)
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0f9      	beq.n	8000414 <Timer_Delay+0x38>
	//* Clear UIF in SR
	TIM7->SR &= ~TIM_SR_UIF;
 8000420:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <Timer_Delay+0x6c>)
 8000422:	691b      	ldr	r3, [r3, #16]
 8000424:	4a08      	ldr	r2, [pc, #32]	@ (8000448 <Timer_Delay+0x6c>)
 8000426:	f023 0301 	bic.w	r3, r3, #1
 800042a:	6113      	str	r3, [r2, #16]
	//* Stop Timer in CR1.
	TIM7->CR1 &= ~TIM_CR1_CEN;
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <Timer_Delay+0x6c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a05      	ldr	r2, [pc, #20]	@ (8000448 <Timer_Delay+0x6c>)
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	6013      	str	r3, [r2, #0]
}
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	10624dd3 	.word	0x10624dd3
 8000448:	40001400 	.word	0x40001400

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	@ (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000450:	f7ff ff78 	bl	8000344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480c      	ldr	r0, [pc, #48]	@ (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000456:	490d      	ldr	r1, [pc, #52]	@ (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000458:	4a0d      	ldr	r2, [pc, #52]	@ (8000490 <LoopForever+0xe>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800046c:	4c0a      	ldr	r4, [pc, #40]	@ (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047a:	f000 f811 	bl	80004a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff ff2d 	bl	80002dc <main>

08000482 <LoopForever>:

LoopForever:
  b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000490:	08000508 	.word	0x08000508
  ldr r2, =_sbss
 8000494:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000498:	2000001c 	.word	0x2000001c

0800049c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC_IRQHandler>
	...

080004a0 <__libc_init_array>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	4d0d      	ldr	r5, [pc, #52]	@ (80004d8 <__libc_init_array+0x38>)
 80004a4:	4c0d      	ldr	r4, [pc, #52]	@ (80004dc <__libc_init_array+0x3c>)
 80004a6:	1b64      	subs	r4, r4, r5
 80004a8:	10a4      	asrs	r4, r4, #2
 80004aa:	2600      	movs	r6, #0
 80004ac:	42a6      	cmp	r6, r4
 80004ae:	d109      	bne.n	80004c4 <__libc_init_array+0x24>
 80004b0:	4d0b      	ldr	r5, [pc, #44]	@ (80004e0 <__libc_init_array+0x40>)
 80004b2:	4c0c      	ldr	r4, [pc, #48]	@ (80004e4 <__libc_init_array+0x44>)
 80004b4:	f000 f818 	bl	80004e8 <_init>
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	10a4      	asrs	r4, r4, #2
 80004bc:	2600      	movs	r6, #0
 80004be:	42a6      	cmp	r6, r4
 80004c0:	d105      	bne.n	80004ce <__libc_init_array+0x2e>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c8:	4798      	blx	r3
 80004ca:	3601      	adds	r6, #1
 80004cc:	e7ee      	b.n	80004ac <__libc_init_array+0xc>
 80004ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d2:	4798      	blx	r3
 80004d4:	3601      	adds	r6, #1
 80004d6:	e7f2      	b.n	80004be <__libc_init_array+0x1e>
 80004d8:	08000500 	.word	0x08000500
 80004dc:	08000500 	.word	0x08000500
 80004e0:	08000500 	.word	0x08000500
 80004e4:	08000504 	.word	0x08000504

080004e8 <_init>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr

080004f4 <_fini>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr
